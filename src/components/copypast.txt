{/* <div className="post-comments">
        <h4>Comments:</h4>
        <p>Im working on it</p>
        <input
          type="text"
          placeholder="Add a comment..."
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              onComment(e.currentTarget.value);
              e.currentTarget.value = "";
            }
          }}
        />
      </div> */}


  
  .post {
    border: 1px solid #ddd;
    margin-top: 20px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    max-width: 600px;
  }
  
  .post-header {
    display: flex;
    justify-content: space-between;
    padding: 16px;
    border-bottom: 1px solid #ddd;
  }
  
  .post-header p {
    margin: 0;
    font-weight: bold;
  }
  
  .post-content {
    padding: 16px;
  }
  
  .post-actions {
    padding: 16px;
    border-bottom: 1px solid #ddd;
  }
  
  .post-actions button {
    background-color: transparent;
    border: none;
    cursor: pointer;
    color: #385185;
  }
  
  .post-comments {
    padding: 16px;
  }
  
  .post-comments h4 {
    margin-bottom: 8px;
  }
  
  .post-comments ul {
    list-style-type: none;
    padding: 0;
  }
  
  .post-comments li {
    margin-bottom: 8px;
  }
  
  .post-comments input {
    width: 100%;
    padding: 8px;
    margin-top: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
  }
  
  // Style the input placeholder text
  .post-comments input::placeholder {
    color: #bbb;
  }
  .comment {
    list-style: none;
    margin-bottom: 8px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Optional: Add hover effect */
  .comment:hover {
    background-color: #f3f4f6;
  }
  .post-like {
    display: flex;
    align-items: center;
  
    .like-button {
      background: none;
      border: none;
      cursor: pointer;
      padding: 0;
      margin: 0;
      font-size: 16px;
      color: #555; // Default color for the heart
  
      &.active {
        color: #ff0000; // Color for the filled heart when active
      }
    }
  
    .like-count {
      margin-left: 8px;
      color: #555; // Default color for the like count
    }
  }
  $color-blue: rgb(78, 101, 203);
$color-purple: rgb(113, 75, 128);
$color-pink: rgb(203, 66, 116);

$transition-time: 500ms;
$transition-ease: cubic-bezier(.1, .7, .8, .3);


.toggle {
  display: flex;
  width: 100px;
  height: 100px;
  border-radius: 50px;
  place-items: center;
  place-content: center;

  &:hover {
    background-color: rgba($color-pink, 0.1);
  }

  input {
    position: absolute;
    visibility: hidden;
  }

  label {
    cursor: pointer;

    svg {
      width: 48px;
    }

    #stroke {
      stroke-dasharray: 100;
      stroke-dashoffset: 100;
      stroke-linecap: round;
      stroke-width: 2.5;
    }

    #initial {
      stroke-width: 1.5;
      stroke: $color-pink;
      fill: transparent;
    }
  }

  input:checked + label {
    svg {
      transform-origin: 50% 50%;
      animation: heart $transition-time cubic-bezier(.64, -1.5, .64, 1.5);
      animation-fill-mode: forwards;
    }

    #initial {
      display: none;
    }

    #stroke {
      animation: stroke $transition-time $transition-ease;
      animation-fill-mode: forwards;
    }
  }
}

@keyframes heart {
  from {
    transform: scale(1);
  }
  78% {
    transform: scale(1.25);
  }
  to {
    transform: scale(1);
  }
}

@keyframes stroke {
  from {
    stroke: $color-blue;
    fill: transparent;
  }
  50% {
    stroke: $color-purple;
  }
  85% {
    fill: transparent;
  }
  to {
    stroke-dashoffset: 0;
    stroke: $color-pink;
    fill: $color-pink;
  }
}

.post-pfp{
  max-width: 24px;
  margin: 0;
  padding: 0;
}

import React, { useRef, useState, useEffect, useCallback } from "react";
import CreatePost from "./createPostComponent";
import Navbar from "./NavbarComponent";
import Feed from "./FeedComponent";
import "../Sass/Home.scss";
import { Link } from "react-router-dom";
import { useAuth } from "../userContext";
import { createPostinDB, findUserWUsername, getPostwUsername } from "../api/DataBaseAPI";

const HomePageComponent = () => {
  const { currentUser } = useAuth();
  const [followingArray, setFollowingArray] = useState([]);
  const [followingPostMap, setFollowingPostMap] = useState({});
  const [postsList, setPostList] = useState([]);
  const [createPost, setCreatePost] = useState(false);
  const [hasMorePosts, setHasMorePosts] = useState(true);
  const [currentIndex, setCurrentIndex] = useState(0);

  const observer = useRef();
  const isInitialized = useRef(false);

  const initialize = useCallback(async () => {
    if (currentUser && currentUser.following) {
      const following = [...currentUser.following, currentUser.username];
      const postMap = {};
      for (let user of following) {
        try {
          let userinfo = await findUserWUsername(user);
          postMap[user] = userinfo[1].posts_created || 0;
        } catch (error) {
          console.error(`Error fetching user info for ${user}:`, error);
        }
      }
      setFollowingArray(following);
      setFollowingPostMap(postMap);
      isInitialized.current = true;
    } else {
      console.log("The user has not logged in");
    }
  }, [currentUser]);

  useEffect(() => {
    initialize();
  }, [initialize]);

  useEffect(() => {
    if (isInitialized.current && Object.keys(followingPostMap).length > 0) {
      retrieveNextPost(5);
    }
  }, [followingPostMap]);

  const toggleCreatePost = () => setCreatePost(!createPost);

  const CreateNewPost = (PostContent) => {
    const newPost = {
      author: currentUser.username,
      timestamp: Date.now(),
      content: PostContent.content,
      likes: 0,
      id: currentUser.posts_created + 1,
      authorpfp: currentUser.profilePictureURL
    };
    
    createPostinDB(currentUser.email, PostContent.content);
    setPostList((prevPosts) => [newPost, ...prevPosts,]);
    
    localStorage.setItem("user-info", JSON.stringify({
      ...currentUser, posts_created: currentUser.posts_created + 1,
    }));
    setCreatePost(false);
  };

  const retrieveNextPost = async (amount) => {
    if (!isInitialized.current || !hasMorePosts) return;

    try {
      let newPosts = [];
      let updatedPostMap = { ...followingPostMap };
      let index = currentIndex;

      for (let i = 0; i < amount; i++) {
        let person = followingArray[index];

        let attempts = 0;
        while (attempts < followingArray.length) {
          if (person && updatedPostMap[person] > 0) {
            let newPost = await getPostwUsername(person, updatedPostMap[person]);//returns userData, PostData
            updatedPostMap[person] -= 1;
            let postwithpfp = {
              ...newPost[0], 
              authorpfp : newPost[1].profilePictureUrl
            }
            if(!newPosts.includes(postwithpfp) && !postsList.includes(postwithpfp)){
              newPosts.push(postwithpfp);
            }
            console.log(newPosts, postsList, postwithpfp)
            break;
          } else {
            console.log(`${person} has no more posts.`);
          }

          index = (index + 1) % followingArray.length;
          person = followingArray[index];
          attempts++;
        }
        index = (index + 1) % followingArray.length;
        if (attempts === followingArray.length) break;
      }

      setCurrentIndex(index);
      setFollowingPostMap(updatedPostMap);
      setPostList((prevPosts) => [...prevPosts, ...newPosts]);

      if (newPosts.length < amount) setHasMorePosts(false);
    } catch (error) {
      console.error("Error retrieving posts:", error);
    }
  };

  const endOfListRef = useCallback((node) => {
    if (observer.current) observer.current.disconnect();

    observer.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting && hasMorePosts) {
        console.log("End of list in view, loading more posts...");
        retrieveNextPost(5);
      }
    });

    if (node) observer.current.observe(node);
  }, [hasMorePosts, retrieveNextPost]);

  return (
    <>
      <Navbar />
      <div className="home-page">
        <div className="feed-container">
          {createPost && <CreatePost onClose={toggleCreatePost} onSubmit={CreateNewPost} />}
          <Feed postList={postsList} />
          <div ref={endOfListRef} className="end-of-list">
            {hasMorePosts ? "Loading more posts..." : "You have reached the end of the available posts."}
          </div>
        </div>

        {currentUser && (
          <div className="new-post-container">
            <button className="new-post" onClick={toggleCreatePost}>
              Create Post? ðŸ‘€
            </button>
          </div>
        )}

        {!currentUser && (
          <div className="login-btn-home">
            <Link to={"/login"}>Login</Link>
          </div>
        )}
      </div>
    </>
  );
};

export default HomePageComponent;